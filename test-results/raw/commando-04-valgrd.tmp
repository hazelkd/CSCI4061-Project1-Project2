==786456== Memcheck, a memory error detector
==786456== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==786456== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==786456== Command: ./commando --echo
==786456== Parent PID: 786455
==786456== 
==786456== Conditional jump or move depends on uninitialised value(s)
==786456==    at 0x10A390: cmdcol_print (cmdcol.c:30)
==786456==    by 0x1097FB: main (commando.c:49)
==786456==  Uninitialised value was created by a heap allocation
==786456==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==786456==    by 0x10957F: main (commando.c:14)
==786456== 
==786456== Invalid read of size 1
==786456==    at 0x483FED4: strcmp (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==786456==    by 0x109675: main (commando.c:34)
==786456==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==786456== 
==786456== 
==786456== Process terminating with default action of signal 11 (SIGSEGV)
==786456==  Access not within mapped region at address 0x0
==786456==    at 0x483FED4: strcmp (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==786456==    by 0x109675: main (commando.c:34)
==786456==  If you believe this happened as a result of a stack
==786456==  overflow in your program's main thread (unlikely but
==786456==  possible), you can try to increase the size of the
==786456==  main thread stack using the --main-stacksize= flag.
==786456==  The main thread stack size used in this run was 8388608.
==786456== 
==786456== HEAP SUMMARY:
==786456==     in use at exit: 8,200 bytes in 1 blocks
==786456==   total heap usage: 4 allocs, 3 frees, 8,687 bytes allocated
==786456== 
==786456== 8,200 bytes in 1 blocks are still reachable in loss record 1 of 1
==786456==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==786456==    by 0x10957F: main (commando.c:14)
==786456== 
==786456== LEAK SUMMARY:
==786456==    definitely lost: 0 bytes in 0 blocks
==786456==    indirectly lost: 0 bytes in 0 blocks
==786456==      possibly lost: 0 bytes in 0 blocks
==786456==    still reachable: 8,200 bytes in 1 blocks
==786456==         suppressed: 0 bytes in 0 blocks
==786456== 
==786456== For lists of detected and suppressed errors, rerun with: -s
==786456== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
