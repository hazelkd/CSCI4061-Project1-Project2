(TEST 15) pause finishes single job
COMMENTS:
Pause should allow short jobs like 'cat' to finish


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-15-expect.tmp
- Actual output in: test-results/raw/commando-15-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                       ==== ACTUAL ====                                                    
@> cat test_data/quote.txt                                           <
@> pause 500000000 0                                                 <
@> list                                                              <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                          <
0    %0           0    EXIT(0)  125 cat test_data/quote.txt          <
@> output-for 0                                                      <
@<<< Output for cat[%0] (125 bytes):                                 <
----------------------------------------                             <
Object-oriented programming is an exceptionally bad idea which could <
only have originated in California.                                  <
                                                                     <
-- Edsger Dijkstra                                                   <
----------------------------------------                             <
@> cat test_data/quote.txt                                           <
@> pause 0 1                                                         <
@> list                                                              <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                          <
0    %0           0    EXIT(0)  125 cat test_data/quote.txt          <
1    %1           0    EXIT(0)  125 cat test_data/quote.txt          <
@> output-for 1                                                      <
@<<< Output for cat[%1] (125 bytes):                                 <
----------------------------------------                             <
Object-oriented programming is an exceptionally bad idea which could <
only have originated in California.                                  <
                                                                     <
-- Edsger Dijkstra                                                   <
----------------------------------------                             <
@> exit                                                              <
ALERTS:                                                                ALERTS:
@!!! cat[%0]: EXIT(0)                                                <
@!!! cat[%1]: EXIT(0)                                                <
--- Line Differences ---
EXPECT:   1) @> cat test_data/quote.txt
EXPECT:   2) @> pause 500000000 0
EXPECT:   3) @> list
EXPECT:   4) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:   5) 0    %0           0    EXIT(0)  125 cat test_data/quote.txt 
EXPECT:   6) @> output-for 0
EXPECT:   7) @<<< Output for cat[%0] (125 bytes):
EXPECT:   8) ----------------------------------------
EXPECT:   9) Object-oriented programming is an exceptionally bad idea which could
EXPECT:  10) only have originated in California.
EXPECT:  11) 
EXPECT:  12) -- Edsger Dijkstra
EXPECT:  13) ----------------------------------------
EXPECT:  14) @> cat test_data/quote.txt
EXPECT:  15) @> pause 0 1
EXPECT:  16) @> list
EXPECT:  17) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:  18) 0    %0           0    EXIT(0)  125 cat test_data/quote.txt 
EXPECT:  19) 1    %1           0    EXIT(0)  125 cat test_data/quote.txt 
EXPECT:  20) @> output-for 1
EXPECT:  21) @<<< Output for cat[%1] (125 bytes):
EXPECT:  22) ----------------------------------------
EXPECT:  23) Object-oriented programming is an exceptionally bad idea which could
EXPECT:  24) only have originated in California.
EXPECT:  25) 
EXPECT:  26) -- Edsger Dijkstra
EXPECT:  27) ----------------------------------------
EXPECT:  28) @> exit
EXPECT:  30) @!!! cat[%0]: EXIT(0)
EXPECT:  31) @!!! cat[%1]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-15-valgrd.tmp ---
==516126== Memcheck, a memory error detector
==516126== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==516126== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==516126== Command: ./commando --echo
==516126== Parent PID: 516125
==516126== 
==516126== Conditional jump or move depends on uninitialised value(s)
==516126==    at 0x109A7F: cmd_new (cmd.c:12)
==516126==    by 0x10954C: main (commando.c:13)
==516126==  Uninitialised value was created by a stack allocation
==516126==    at 0x1094D9: main (commando.c:6)
==516126== 
==516126== Conditional jump or move depends on uninitialised value(s)
==516126==    at 0x109AE4: cmd_new (cmd.c:21)
==516126==    by 0x10954C: main (commando.c:13)
==516126==  Uninitialised value was created by a stack allocation
==516126==    at 0x1094D9: main (commando.c:6)
==516126== 
==516126== Invalid read of size 4
==516126==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==516126==    by 0x10956C: main (commando.c:14)
==516126==  Address 0x2000 is not stack'd, malloc'd or (recently) free'd
==516126== 
==516126== 
==516126== Process terminating with default action of signal 11 (SIGSEGV)
==516126==  Access not within mapped region at address 0x2000
==516126==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==516126==    by 0x10956C: main (commando.c:14)
==516126==  If you believe this happened as a result of a stack
==516126==  overflow in your program's main thread (unlikely but
==516126==  possible), you can try to increase the size of the
==516126==  main thread stack using the --main-stacksize= flag.
==516126==  The main thread stack size used in this run was 8388608.
==516126== 
==516126== HEAP SUMMARY:
==516126==     in use at exit: 2,352 bytes in 1 blocks
==516126==   total heap usage: 1 allocs, 0 frees, 2,352 bytes allocated
==516126== 
==516126== 2,352 bytes in 1 blocks are still reachable in loss record 1 of 1
==516126==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==516126==    by 0x109A50: cmd_new (cmd.c:8)
==516126==    by 0x10954C: main (commando.c:13)
==516126== 
==516126== LEAK SUMMARY:
==516126==    definitely lost: 0 bytes in 0 blocks
==516126==    indirectly lost: 0 bytes in 0 blocks
==516126==      possibly lost: 0 bytes in 0 blocks
==516126==    still reachable: 2,352 bytes in 1 blocks
==516126==         suppressed: 0 bytes in 0 blocks
==516126== 
==516126== For lists of detected and suppressed errors, rerun with: -s
==516126== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

