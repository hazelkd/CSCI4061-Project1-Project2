(TEST 6) cat on test_data/quote.txt file
COMMENTS:
Checks that cat runs correctly on the test_data/quote.txt file.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-06-expect.tmp
- Actual output in: test-results/raw/commando-06-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                       ==== ACTUAL ====                                                    
@> cat test_data/quote.txt                                           <
@> wait-for 0                                                        <
@> output-for 0                                                      <
@<<< Output for cat[%0] (125 bytes):                                 <
----------------------------------------                             <
Object-oriented programming is an exceptionally bad idea which could <
only have originated in California.                                  <
                                                                     <
-- Edsger Dijkstra                                                   <
----------------------------------------                             <
@> list                                                              <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                          <
0    %0           0    EXIT(0)  125 cat test_data/quote.txt          <
@> exit                                                              <
ALERTS:                                                                ALERTS:
@!!! cat[%0]: EXIT(0)                                                <
--- Line Differences ---
EXPECT:   1) @> cat test_data/quote.txt
EXPECT:   2) @> wait-for 0
EXPECT:   3) @> output-for 0
EXPECT:   4) @<<< Output for cat[%0] (125 bytes):
EXPECT:   5) ----------------------------------------
EXPECT:   6) Object-oriented programming is an exceptionally bad idea which could
EXPECT:   7) only have originated in California.
EXPECT:   8) 
EXPECT:   9) -- Edsger Dijkstra
EXPECT:  10) ----------------------------------------
EXPECT:  11) @> list
EXPECT:  12) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:  13) 0    %0           0    EXIT(0)  125 cat test_data/quote.txt 
EXPECT:  14) @> exit
EXPECT:  16) @!!! cat[%0]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-06-valgrd.tmp ---
==515523== Memcheck, a memory error detector
==515523== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==515523== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==515523== Command: ./commando --echo
==515523== Parent PID: 515522
==515523== 
==515523== Conditional jump or move depends on uninitialised value(s)
==515523==    at 0x109A7F: cmd_new (cmd.c:12)
==515523==    by 0x10954C: main (commando.c:13)
==515523==  Uninitialised value was created by a stack allocation
==515523==    at 0x1094D9: main (commando.c:6)
==515523== 
==515523== Conditional jump or move depends on uninitialised value(s)
==515523==    at 0x109AE4: cmd_new (cmd.c:21)
==515523==    by 0x10954C: main (commando.c:13)
==515523==  Uninitialised value was created by a stack allocation
==515523==    at 0x1094D9: main (commando.c:6)
==515523== 
==515523== Invalid read of size 4
==515523==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515523==    by 0x10956C: main (commando.c:14)
==515523==  Address 0x2000 is not stack'd, malloc'd or (recently) free'd
==515523== 
==515523== 
==515523== Process terminating with default action of signal 11 (SIGSEGV)
==515523==  Access not within mapped region at address 0x2000
==515523==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515523==    by 0x10956C: main (commando.c:14)
==515523==  If you believe this happened as a result of a stack
==515523==  overflow in your program's main thread (unlikely but
==515523==  possible), you can try to increase the size of the
==515523==  main thread stack using the --main-stacksize= flag.
==515523==  The main thread stack size used in this run was 8388608.
==515523== 
==515523== HEAP SUMMARY:
==515523==     in use at exit: 2,352 bytes in 1 blocks
==515523==   total heap usage: 1 allocs, 0 frees, 2,352 bytes allocated
==515523== 
==515523== 2,352 bytes in 1 blocks are still reachable in loss record 1 of 1
==515523==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==515523==    by 0x109A50: cmd_new (cmd.c:8)
==515523==    by 0x10954C: main (commando.c:13)
==515523== 
==515523== LEAK SUMMARY:
==515523==    definitely lost: 0 bytes in 0 blocks
==515523==    indirectly lost: 0 bytes in 0 blocks
==515523==      possibly lost: 0 bytes in 0 blocks
==515523==    still reachable: 2,352 bytes in 1 blocks
==515523==         suppressed: 0 bytes in 0 blocks
==515523== 
==515523== For lists of detected and suppressed errors, rerun with: -s
==515523== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

