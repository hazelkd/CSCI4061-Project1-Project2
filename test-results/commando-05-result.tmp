(TEST 5) ls on the test_data/stuff directory
COMMENTS:
Checks that ls produces the correct results when called on the
provided test_data/stuff directory.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-05-expect.tmp
- Actual output in: test-results/raw/commando-05-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                ==== ACTUAL ====                                             
@> ls -a -F test_data/stuff/                                  <
@> wait-for 0                                                 <
@> list                                                       <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                   <
0    %0          0    EXIT(0)   55 ls -a -F test_data/stuff/  <
@> output-for 0                                               <
@<<< Output for ls[%0] (55 bytes):                            <
----------------------------------------                      <
./                                                            <
../                                                           <
empty                                                         <
gettysburg.txt                                                <
quote.txt                                                     <
table.sh*                                                     <
util.o                                                        <
----------------------------------------                      <
@> exit                                                       <
ALERTS:                                                         ALERTS:
@!!! ls[%0]: EXIT(0)                                          <
--- Line Differences ---
EXPECT:   1) @> ls -a -F test_data/stuff/
EXPECT:   2) @> wait-for 0
EXPECT:   3) @> list
EXPECT:   4) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:   5) 0    %0          0    EXIT(0)   55 ls -a -F test_data/stuff/ 
EXPECT:   6) @> output-for 0
EXPECT:   7) @<<< Output for ls[%0] (55 bytes):
EXPECT:   8) ----------------------------------------
EXPECT:   9) ./
EXPECT:  10) ../
EXPECT:  11) empty
EXPECT:  12) gettysburg.txt
EXPECT:  13) quote.txt
EXPECT:  14) table.sh*
EXPECT:  15) util.o
EXPECT:  16) ----------------------------------------
EXPECT:  17) @> exit
EXPECT:  19) @!!! ls[%0]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-05-valgrd.tmp ---
==515478== Memcheck, a memory error detector
==515478== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==515478== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==515478== Command: ./commando --echo
==515478== Parent PID: 515477
==515478== 
==515478== Conditional jump or move depends on uninitialised value(s)
==515478==    at 0x109A7F: cmd_new (cmd.c:12)
==515478==    by 0x10954C: main (commando.c:13)
==515478==  Uninitialised value was created by a stack allocation
==515478==    at 0x1094D9: main (commando.c:6)
==515478== 
==515478== Conditional jump or move depends on uninitialised value(s)
==515478==    at 0x109AE4: cmd_new (cmd.c:21)
==515478==    by 0x10954C: main (commando.c:13)
==515478==  Uninitialised value was created by a stack allocation
==515478==    at 0x1094D9: main (commando.c:6)
==515478== 
==515478== Invalid read of size 4
==515478==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515478==    by 0x10956C: main (commando.c:14)
==515478==  Address 0x2000 is not stack'd, malloc'd or (recently) free'd
==515478== 
==515478== 
==515478== Process terminating with default action of signal 11 (SIGSEGV)
==515478==  Access not within mapped region at address 0x2000
==515478==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515478==    by 0x10956C: main (commando.c:14)
==515478==  If you believe this happened as a result of a stack
==515478==  overflow in your program's main thread (unlikely but
==515478==  possible), you can try to increase the size of the
==515478==  main thread stack using the --main-stacksize= flag.
==515478==  The main thread stack size used in this run was 8388608.
==515478== 
==515478== HEAP SUMMARY:
==515478==     in use at exit: 2,352 bytes in 1 blocks
==515478==   total heap usage: 1 allocs, 0 frees, 2,352 bytes allocated
==515478== 
==515478== 2,352 bytes in 1 blocks are still reachable in loss record 1 of 1
==515478==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==515478==    by 0x109A50: cmd_new (cmd.c:8)
==515478==    by 0x10954C: main (commando.c:13)
==515478== 
==515478== LEAK SUMMARY:
==515478==    definitely lost: 0 bytes in 0 blocks
==515478==    indirectly lost: 0 bytes in 0 blocks
==515478==      possibly lost: 0 bytes in 0 blocks
==515478==    still reachable: 2,352 bytes in 1 blocks
==515478==         suppressed: 0 bytes in 0 blocks
==515478== 
==515478== For lists of detected and suppressed errors, rerun with: -s
==515478== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

