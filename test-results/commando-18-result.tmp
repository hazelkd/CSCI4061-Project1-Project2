(TEST 18) wait-for individual jobs
COMMENTS:
Checks that wait-for waits for individual commands, not all running
commands. Output for the different 'sleep' commands becomes available
at different times in the below which can be coordinated by the
'wait-for' builtin.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-18-expect.tmp
- Actual output in: test-results/raw/commando-18-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                           ==== ACTUAL ====                        
@> sleep 1                               <
@> sleep 3                               <
@> sleep 2                               <
@> wait-for 0                            <
@> output-for 0                          <
@<<< Output for sleep[%0] (0 bytes):     <
---------------------------------------- <
---------------------------------------- <
@> output-for 1                          <
@<<< Output for sleep[%1] (-1 bytes):    <
---------------------------------------- <
sleep[%1] : output not ready             <
---------------------------------------- <
@> wait-for 2                            <
@> output-for 2                          <
@<<< Output for sleep[%2] (0 bytes):     <
---------------------------------------- <
---------------------------------------- <
@> output-for 1                          <
@<<< Output for sleep[%1] (-1 bytes):    <
---------------------------------------- <
sleep[%1] : output not ready             <
---------------------------------------- <
@> wait-all                              <
@> output-for 1                          <
@<<< Output for sleep[%1] (0 bytes):     <
---------------------------------------- <
---------------------------------------- <
@> exit                                  <
ALERTS:                                    ALERTS:
@!!! sleep[%0]: EXIT(0)                  <
@!!! sleep[%2]: EXIT(0)                  <
@!!! sleep[%1]: EXIT(0)                  <
                                         <
--- Line Differences ---
EXPECT:   1) @> sleep 1
EXPECT:   2) @> sleep 3
EXPECT:   3) @> sleep 2
EXPECT:   4) @> wait-for 0
EXPECT:   5) @> output-for 0
EXPECT:   6) @<<< Output for sleep[%0] (0 bytes):
EXPECT:   7) ----------------------------------------
EXPECT:   8) ----------------------------------------
EXPECT:   9) @> output-for 1
EXPECT:  10) @<<< Output for sleep[%1] (-1 bytes):
EXPECT:  11) ----------------------------------------
EXPECT:  12) sleep[%1] : output not ready
EXPECT:  13) ----------------------------------------
EXPECT:  14) @> wait-for 2
EXPECT:  15) @> output-for 2
EXPECT:  16) @<<< Output for sleep[%2] (0 bytes):
EXPECT:  17) ----------------------------------------
EXPECT:  18) ----------------------------------------
EXPECT:  19) @> output-for 1
EXPECT:  20) @<<< Output for sleep[%1] (-1 bytes):
EXPECT:  21) ----------------------------------------
EXPECT:  22) sleep[%1] : output not ready
EXPECT:  23) ----------------------------------------
EXPECT:  24) @> wait-all
EXPECT:  25) @> output-for 1
EXPECT:  26) @<<< Output for sleep[%1] (0 bytes):
EXPECT:  27) ----------------------------------------
EXPECT:  28) ----------------------------------------
EXPECT:  29) @> exit
EXPECT:  31) @!!! sleep[%0]: EXIT(0)
EXPECT:  32) @!!! sleep[%2]: EXIT(0)
EXPECT:  33) @!!! sleep[%1]: EXIT(0)
EXPECT:  34) 

--- Valgrind Log from: test-results/raw/commando-18-valgrd.tmp ---
==516379== Memcheck, a memory error detector
==516379== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==516379== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==516379== Command: ./commando --echo
==516379== Parent PID: 516378
==516379== 
==516379== Conditional jump or move depends on uninitialised value(s)
==516379==    at 0x109A7F: cmd_new (cmd.c:12)
==516379==    by 0x10954C: main (commando.c:13)
==516379==  Uninitialised value was created by a stack allocation
==516379==    at 0x1094D9: main (commando.c:6)
==516379== 
==516379== Conditional jump or move depends on uninitialised value(s)
==516379==    at 0x109AE4: cmd_new (cmd.c:21)
==516379==    by 0x10954C: main (commando.c:13)
==516379==  Uninitialised value was created by a stack allocation
==516379==    at 0x1094D9: main (commando.c:6)
==516379== 
==516379== Invalid read of size 4
==516379==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==516379==    by 0x10956C: main (commando.c:14)
==516379==  Address 0x2000 is not stack'd, malloc'd or (recently) free'd
==516379== 
==516379== 
==516379== Process terminating with default action of signal 11 (SIGSEGV)
==516379==  Access not within mapped region at address 0x2000
==516379==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==516379==    by 0x10956C: main (commando.c:14)
==516379==  If you believe this happened as a result of a stack
==516379==  overflow in your program's main thread (unlikely but
==516379==  possible), you can try to increase the size of the
==516379==  main thread stack using the --main-stacksize= flag.
==516379==  The main thread stack size used in this run was 8388608.
==516379== 
==516379== HEAP SUMMARY:
==516379==     in use at exit: 2,352 bytes in 1 blocks
==516379==   total heap usage: 1 allocs, 0 frees, 2,352 bytes allocated
==516379== 
==516379== 2,352 bytes in 1 blocks are still reachable in loss record 1 of 1
==516379==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==516379==    by 0x109A50: cmd_new (cmd.c:8)
==516379==    by 0x10954C: main (commando.c:13)
==516379== 
==516379== LEAK SUMMARY:
==516379==    definitely lost: 0 bytes in 0 blocks
==516379==    indirectly lost: 0 bytes in 0 blocks
==516379==      possibly lost: 0 bytes in 0 blocks
==516379==    still reachable: 2,352 bytes in 1 blocks
==516379==         suppressed: 0 bytes in 0 blocks
==516379== 
==516379== For lists of detected and suppressed errors, rerun with: -s
==516379== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

