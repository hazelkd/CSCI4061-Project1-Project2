(TEST 11) output-all builtin
COMMENTS:
Same as previous test (rm, gcc, run program) but uses the 'output-all'
builtin to show output for all commands.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-11-expect.tmp
- Actual output in: test-results/raw/commando-11-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                                          ==== ACTUAL ====                                                                       
@> rm -f ./test_data/print_args                                                         <
@> wait-for 0                                                                           <
@> gcc -o test_data/print_args test_data/print_args.c                                   <
@> wait-for 1                                                                           <
@> test_data/print_args hello goodbye so long                                           <
@> wait-for 2                                                                           <
@> list                                                                                 <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                                             <
0    %0           0    EXIT(0)    0 rm -f ./test_data/print_args                        <
1    %1           0    EXIT(0)    0 gcc -o test_data/print_args test_data/print_args.c  <
2    %2           0    EXIT(0)   74 test_data/print_args hello goodbye so long          <
@> output-all                                                                           <
@<<< Output for rm[%0] (0 bytes):                                                       <
----------------------------------------                                                <
----------------------------------------                                                <
@<<< Output for gcc[%1] (0 bytes):                                                      <
----------------------------------------                                                <
----------------------------------------                                                <
@<<< Output for test_data/print_args[%2] (74 bytes):                                    <
----------------------------------------                                                <
5 args received                                                                         <
0: test_data/print_args                                                                 <
1: hello                                                                                <
2: goodbye                                                                              <
3: so                                                                                   <
4: long                                                                                 <
----------------------------------------                                                <
@> exit                                                                                 <
ALERTS:                                                                                   ALERTS:
@!!! rm[%0]: EXIT(0)                                                                    <
@!!! gcc[%1]: EXIT(0)                                                                   <
@!!! test_data/print_args[%2]: EXIT(0)                                                  <
--- Line Differences ---
EXPECT:   1) @> rm -f ./test_data/print_args
EXPECT:   2) @> wait-for 0
EXPECT:   3) @> gcc -o test_data/print_args test_data/print_args.c
EXPECT:   4) @> wait-for 1
EXPECT:   5) @> test_data/print_args hello goodbye so long
EXPECT:   6) @> wait-for 2
EXPECT:   7) @> list
EXPECT:   8) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:   9) 0    %0           0    EXIT(0)    0 rm -f ./test_data/print_args 
EXPECT:  10) 1    %1           0    EXIT(0)    0 gcc -o test_data/print_args test_data/print_args.c 
EXPECT:  11) 2    %2           0    EXIT(0)   74 test_data/print_args hello goodbye so long 
EXPECT:  12) @> output-all
EXPECT:  13) @<<< Output for rm[%0] (0 bytes):
EXPECT:  14) ----------------------------------------
EXPECT:  15) ----------------------------------------
EXPECT:  16) @<<< Output for gcc[%1] (0 bytes):
EXPECT:  17) ----------------------------------------
EXPECT:  18) ----------------------------------------
EXPECT:  19) @<<< Output for test_data/print_args[%2] (74 bytes):
EXPECT:  20) ----------------------------------------
EXPECT:  21) 5 args received
EXPECT:  22) 0: test_data/print_args
EXPECT:  23) 1: hello
EXPECT:  24) 2: goodbye
EXPECT:  25) 3: so
EXPECT:  26) 4: long
EXPECT:  27) ----------------------------------------
EXPECT:  28) @> exit
EXPECT:  30) @!!! rm[%0]: EXIT(0)
EXPECT:  31) @!!! gcc[%1]: EXIT(0)
EXPECT:  32) @!!! test_data/print_args[%2]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-11-valgrd.tmp ---
==515764== Memcheck, a memory error detector
==515764== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==515764== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==515764== Command: ./commando --echo
==515764== Parent PID: 515763
==515764== 
==515764== Conditional jump or move depends on uninitialised value(s)
==515764==    at 0x109A7F: cmd_new (cmd.c:12)
==515764==    by 0x10954C: main (commando.c:13)
==515764==  Uninitialised value was created by a stack allocation
==515764==    at 0x1094D9: main (commando.c:6)
==515764== 
==515764== Conditional jump or move depends on uninitialised value(s)
==515764==    at 0x109AE4: cmd_new (cmd.c:21)
==515764==    by 0x10954C: main (commando.c:13)
==515764==  Uninitialised value was created by a stack allocation
==515764==    at 0x1094D9: main (commando.c:6)
==515764== 
==515764== Invalid read of size 4
==515764==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515764==    by 0x10956C: main (commando.c:14)
==515764==  Address 0x2000 is not stack'd, malloc'd or (recently) free'd
==515764== 
==515764== 
==515764== Process terminating with default action of signal 11 (SIGSEGV)
==515764==  Access not within mapped region at address 0x2000
==515764==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515764==    by 0x10956C: main (commando.c:14)
==515764==  If you believe this happened as a result of a stack
==515764==  overflow in your program's main thread (unlikely but
==515764==  possible), you can try to increase the size of the
==515764==  main thread stack using the --main-stacksize= flag.
==515764==  The main thread stack size used in this run was 8388608.
==515764== 
==515764== HEAP SUMMARY:
==515764==     in use at exit: 2,352 bytes in 1 blocks
==515764==   total heap usage: 1 allocs, 0 frees, 2,352 bytes allocated
==515764== 
==515764== 2,352 bytes in 1 blocks are still reachable in loss record 1 of 1
==515764==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==515764==    by 0x109A50: cmd_new (cmd.c:8)
==515764==    by 0x10954C: main (commando.c:13)
==515764== 
==515764== LEAK SUMMARY:
==515764==    definitely lost: 0 bytes in 0 blocks
==515764==    indirectly lost: 0 bytes in 0 blocks
==515764==      possibly lost: 0 bytes in 0 blocks
==515764==    still reachable: 2,352 bytes in 1 blocks
==515764==         suppressed: 0 bytes in 0 blocks
==515764== 
==515764== For lists of detected and suppressed errors, rerun with: -s
==515764== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

