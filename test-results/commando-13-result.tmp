(TEST 13) Output Changes
COMMENTS:
Starts a program and shows it in a listing before it is complete.
Requests output before it is complete which should be handled
gracefully showing an 'output not ready' message.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-13-expect.tmp
- Actual output in: test-results/raw/commando-13-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                                            ==== ACTUAL ====                                                                         
@> gcc -o test_data/sleep_print test_data/sleep_print.c                                   <
@> wait-for 0                                                                             <
@> test_data/sleep_print 1 hi there                                                       <
@> list                                                                                   <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                                               <
0    %0           0    EXIT(0)    0 gcc -o test_data/sleep_print test_data/sleep_print.c  <
1    %1          -1        RUN   -1 test_data/sleep_print 1 hi there                      <
@> output-for 1                                                                           <
@<<< Output for test_data/sleep_print[%1] (-1 bytes):                                     <
----------------------------------------                                                  <
test_data/sleep_print[%1] : output not ready                                              <
----------------------------------------                                                  <
@> wait-for 1                                                                             <
@> list                                                                                   <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                                               <
0    %0           0    EXIT(0)    0 gcc -o test_data/sleep_print test_data/sleep_print.c  <
1    %1           1    EXIT(1)   10 test_data/sleep_print 1 hi there                      <
@> output-for 1                                                                           <
@<<< Output for test_data/sleep_print[%1] (10 bytes):                                     <
----------------------------------------                                                  <
hi there                                                                                  <
----------------------------------------                                                  <
@> exit                                                                                   <
ALERTS:                                                                                     ALERTS:
@!!! gcc[%0]: EXIT(0)                                                                     <
@!!! test_data/sleep_print[%1]: EXIT(1)                                                   <
--- Line Differences ---
EXPECT:   1) @> gcc -o test_data/sleep_print test_data/sleep_print.c
EXPECT:   2) @> wait-for 0
EXPECT:   3) @> test_data/sleep_print 1 hi there
EXPECT:   4) @> list
EXPECT:   5) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:   6) 0    %0           0    EXIT(0)    0 gcc -o test_data/sleep_print test_data/sleep_print.c 
EXPECT:   7) 1    %1          -1        RUN   -1 test_data/sleep_print 1 hi there 
EXPECT:   8) @> output-for 1
EXPECT:   9) @<<< Output for test_data/sleep_print[%1] (-1 bytes):
EXPECT:  10) ----------------------------------------
EXPECT:  11) test_data/sleep_print[%1] : output not ready
EXPECT:  12) ----------------------------------------
EXPECT:  13) @> wait-for 1
EXPECT:  14) @> list
EXPECT:  15) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:  16) 0    %0           0    EXIT(0)    0 gcc -o test_data/sleep_print test_data/sleep_print.c 
EXPECT:  17) 1    %1           1    EXIT(1)   10 test_data/sleep_print 1 hi there 
EXPECT:  18) @> output-for 1
EXPECT:  19) @<<< Output for test_data/sleep_print[%1] (10 bytes):
EXPECT:  20) ----------------------------------------
EXPECT:  21) hi there 
EXPECT:  22) ----------------------------------------
EXPECT:  23) @> exit
EXPECT:  25) @!!! gcc[%0]: EXIT(0)
EXPECT:  26) @!!! test_data/sleep_print[%1]: EXIT(1)

--- Valgrind Log from: test-results/raw/commando-13-valgrd.tmp ---
==515887== Memcheck, a memory error detector
==515887== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==515887== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==515887== Command: ./commando --echo
==515887== Parent PID: 515886
==515887== 
==515887== Conditional jump or move depends on uninitialised value(s)
==515887==    at 0x109A7F: cmd_new (cmd.c:12)
==515887==    by 0x10954C: main (commando.c:13)
==515887==  Uninitialised value was created by a stack allocation
==515887==    at 0x1094D9: main (commando.c:6)
==515887== 
==515887== Conditional jump or move depends on uninitialised value(s)
==515887==    at 0x109AE4: cmd_new (cmd.c:21)
==515887==    by 0x10954C: main (commando.c:13)
==515887==  Uninitialised value was created by a stack allocation
==515887==    at 0x1094D9: main (commando.c:6)
==515887== 
==515887== Invalid read of size 4
==515887==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515887==    by 0x10956C: main (commando.c:14)
==515887==  Address 0x2000 is not stack'd, malloc'd or (recently) free'd
==515887== 
==515887== 
==515887== Process terminating with default action of signal 11 (SIGSEGV)
==515887==  Access not within mapped region at address 0x2000
==515887==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==515887==    by 0x10956C: main (commando.c:14)
==515887==  If you believe this happened as a result of a stack
==515887==  overflow in your program's main thread (unlikely but
==515887==  possible), you can try to increase the size of the
==515887==  main thread stack using the --main-stacksize= flag.
==515887==  The main thread stack size used in this run was 8388608.
==515887== 
==515887== HEAP SUMMARY:
==515887==     in use at exit: 2,352 bytes in 1 blocks
==515887==   total heap usage: 1 allocs, 0 frees, 2,352 bytes allocated
==515887== 
==515887== 2,352 bytes in 1 blocks are still reachable in loss record 1 of 1
==515887==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==515887==    by 0x109A50: cmd_new (cmd.c:8)
==515887==    by 0x10954C: main (commando.c:13)
==515887== 
==515887== LEAK SUMMARY:
==515887==    definitely lost: 0 bytes in 0 blocks
==515887==    indirectly lost: 0 bytes in 0 blocks
==515887==      possibly lost: 0 bytes in 0 blocks
==515887==    still reachable: 2,352 bytes in 1 blocks
==515887==         suppressed: 0 bytes in 0 blocks
==515887== 
==515887== For lists of detected and suppressed errors, rerun with: -s
==515887== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

