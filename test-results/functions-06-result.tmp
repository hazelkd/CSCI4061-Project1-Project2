(TEST 6) cmd_start_3
COMMENTS:

program: ./test_cmd cmd_start_3
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/functions-06-expect.tmp
- Actual output in: test-results/raw/functions-06-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                          ==== ACTUAL ====                                       
{                                                         {
    // Tests cmd_start() to properly adjust data in           // Tests cmd_start() to properly adjust data in
    // a cmd_t after forking a child process to run           // a cmd_t after forking a child process to run
    // the command. Fields such as str_status should          // the command. Fields such as str_status should
    // reflect that the command has started running.          // reflect that the command has started running.
    // If the pipes have been setup properly, no output       // If the pipes have been setup properly, no output
    // will appear on the screen for the child command.       // will appear on the screen for the child command.
    char *argv[] = {                                          char *argv[] = {
      "ls",                                                     "ls",
      "-F",                                                     "-F",
      "-a",                                                     "-a",
      "-1",                                                     "-1",
      "test_data/stuff",                                        "test_data/stuff",
      NULL                                                      NULL
    };                                                        };
    cmd_t *cmd = cmd_new(argv);                               cmd_t *cmd = cmd_new(argv);
    assert_pointers_unique(argv, cmd);                        assert_pointers_unique(argv, cmd);
    cmd_start(cmd);                                           cmd_start(cmd);
    test_print_cmd(cmd);                                      test_print_cmd(cmd);
    cmd_free(cmd);                                            cmd_free(cmd);
}                                                         }
cmd->name: ls                                           <
cmd->argv[]:                                            <
  [  0] : ls                                            <
  [  1] : -F                                            <
  [  2] : -a                                            <
  [  3] : -1                                            <
  [  4] : test_data/stuff                               <
  [  5] : (null)                                        <
cmd->pid > 0 : yes                                      <
cmd->pid: %0                                            <
cmd->out_pipe[PREAD]  > 0: yes                          <
cmd->out_pipe[PWRITE] > 0: yes                          <
cmd->status: -1                                         <
cmd->str_status: RUN                                    <
cmd->finished: 0                                        <
cmd->output_size: -1                                    <
cmd->output:                                            <
(null)                                                  <
ALERTS:                                                   ALERTS:
--- Line Differences ---
EXPECT:  22) cmd->name: ls
EXPECT:  23) cmd->argv[]:
EXPECT:  24)   [  0] : ls
EXPECT:  25)   [  1] : -F
EXPECT:  26)   [  2] : -a
EXPECT:  27)   [  3] : -1
EXPECT:  28)   [  4] : test_data/stuff
EXPECT:  29)   [  5] : (null)
EXPECT:  30) cmd->pid > 0 : yes
EXPECT:  31) cmd->pid: %0
EXPECT:  32) cmd->out_pipe[PREAD]  > 0: yes
EXPECT:  33) cmd->out_pipe[PWRITE] > 0: yes
EXPECT:  34) cmd->status: -1
EXPECT:  35) cmd->str_status: RUN
EXPECT:  36) cmd->finished: 0
EXPECT:  37) cmd->output_size: -1
EXPECT:  38) cmd->output:
EXPECT:  39) (null)

--- Valgrind Log from: test-results/raw/functions-06-valgrd.tmp ---
==2844915== Memcheck, a memory error detector
==2844915== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2844915== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2844915== Command: ./test_cmd cmd_start_3
==2844915== Parent PID: 2844914
==2844915== 
==2844915== Invalid write of size 8
==2844915==    at 0x10B26B: cmd_new (cmd.c:7)
==2844915==    by 0x109CA0: main (test_cmd.c:164)
==2844915==  Address 0x100 is not stack'd, malloc'd or (recently) free'd
==2844915== 
==2844915== 
==2844915== Process terminating with default action of signal 11 (SIGSEGV)
==2844915==  Access not within mapped region at address 0x100
==2844915==    at 0x10B26B: cmd_new (cmd.c:7)
==2844915==    by 0x109CA0: main (test_cmd.c:164)
==2844915==  If you believe this happened as a result of a stack
==2844915==  overflow in your program's main thread (unlikely but
==2844915==  possible), you can try to increase the size of the
==2844915==  main thread stack using the --main-stacksize= flag.
==2844915==  The main thread stack size used in this run was 8388608.
==2844915== 
==2844915== HEAP SUMMARY:
==2844915==     in use at exit: 9 bytes in 1 blocks
==2844915==   total heap usage: 1 allocs, 0 frees, 9 bytes allocated
==2844915== 
==2844915== 9 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2844915==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==2844915==    by 0x10B263: cmd_new (cmd.c:7)
==2844915==    by 0x109CA0: main (test_cmd.c:164)
==2844915== 
==2844915== LEAK SUMMARY:
==2844915==    definitely lost: 9 bytes in 1 blocks
==2844915==    indirectly lost: 0 bytes in 0 blocks
==2844915==      possibly lost: 0 bytes in 0 blocks
==2844915==    still reachable: 0 bytes in 0 blocks
==2844915==         suppressed: 0 bytes in 0 blocks
==2844915== 
==2844915== For lists of detected and suppressed errors, rerun with: -s
==2844915== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

