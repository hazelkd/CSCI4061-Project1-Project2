(TEST 17) pause not done
COMMENTS:
Starts several jobs then pauses; longer running jobs should not finish
during the initial 'pause' but should finish after a 'wait-all'.


program: ./commando --echo
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Valgrind reports reachable memory, may need to add free() or fclose()
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/commando-17-expect.tmp
- Actual output in: test-results/raw/commando-17-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                          ==== ACTUAL ====                                                       
@> cat test_data/quote.txt                                              <
@> test_data/table.sh 20 2                                              <
@> sleep 2                                                              <
@> cat test_data/gettysburg.txt                                         <
@> grep printf test_data/print_args.c                                   <
@> sleep 4                                                              <
@> pause 500000000 0                                                    <
@> list                                                                 <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                             <
0    %0           0    EXIT(0)  125 cat test_data/quote.txt             <
1    %3          -1        RUN   -1 test_data/table.sh 20 2             <
2    %4          -1        RUN   -1 sleep 2                             <
3    %1           0    EXIT(0) 1511 cat test_data/gettysburg.txt        <
4    %2           0    EXIT(0)   71 grep printf test_data/print_args.c  <
5    %5          -1        RUN   -1 sleep 4                             <
@> output-all                                                           <
@<<< Output for cat[%0] (125 bytes):                                    <
----------------------------------------                                <
Object-oriented programming is an exceptionally bad idea which could    <
only have originated in California.                                     <
                                                                        <
-- Edsger Dijkstra                                                      <
----------------------------------------                                <
@<<< Output for test_data/table.sh[%3] (-1 bytes):                      <
----------------------------------------                                <
test_data/table.sh[%3] : output not ready                               <
----------------------------------------                                <
@<<< Output for sleep[%4] (-1 bytes):                                   <
----------------------------------------                                <
sleep[%4] : output not ready                                            <
----------------------------------------                                <
@<<< Output for cat[%1] (1511 bytes):                                   <
----------------------------------------                                <
Four score and seven years ago our fathers brought forth on this        <
continent, a new nation, conceived in Liberty, and dedicated to the     <
proposition that all men are created equal.                             <
                                                                        <
Now we are engaged in a great civil war, testing whether that nation,   <
or any nation so conceived and so dedicated, can long endure. We are    <
met on a great battle-field of that war. We have come to dedicate a     <
portion of that field, as a final resting place for those who here      <
gave their lives that that nation might live. It is altogether fitting  <
and proper that we should do this.                                      <
                                                                        <
But, in a larger sense, we can not dedicate -- we can not consecrate    <
-- we can not hallow -- this ground. The brave men, living and dead,    <
who struggled here, have consecrated it, far above our poor power to    <
add or detract. The world will little note, nor long remember what we   <
say here, but it can never forget what they did here. It is for us the  <
living, rather, to be dedicated here to the unfinished work which they  <
who fought here have thus far so nobly advanced. It is rather for us    <
to be here dedicated to the great task remaining before us -- that      <
from these honored dead we take increased devotion to that cause for    <
which they gave the last full measure of devotion -- that we here       <
highly resolve that these dead shall not have died in vain -- that      <
this nation, under God, shall have a new birth of freedom -- and that   <
government of the people, by the people, for the people, shall not      <
perish from the earth.                                                  <
                                                                        <
Abraham Lincoln                                                         <
November 19, 1863                                                       <
----------------------------------------                                <
@<<< Output for grep[%2] (71 bytes):                                    <
----------------------------------------                                <
  printf("%d args received\n",argc);                                    <
    printf("%d: %s\n",i,argv[i]);                                       <
----------------------------------------                                <
@<<< Output for sleep[%5] (-1 bytes):                                   <
----------------------------------------                                <
sleep[%5] : output not ready                                            <
----------------------------------------                                <
@> wait-all                                                             <
@> list                                                                 <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                             <
0    %0           0    EXIT(0)  125 cat test_data/quote.txt             <
1    %3           0    EXIT(0)  760 test_data/table.sh 20 2             <
2    %4           0    EXIT(0)    0 sleep 2                             <
3    %1           0    EXIT(0) 1511 cat test_data/gettysburg.txt        <
4    %2           0    EXIT(0)   71 grep printf test_data/print_args.c  <
5    %5           0    EXIT(0)    0 sleep 4                             <
@> exit                                                                 <
ALERTS:                                                                   ALERTS:
@!!! cat[%0]: EXIT(0)                                                   <
@!!! cat[%1]: EXIT(0)                                                   <
@!!! grep[%2]: EXIT(0)                                                  <
@!!! test_data/table.sh[%3]: EXIT(0)                                    <
@!!! sleep[%4]: EXIT(0)                                                 <
@!!! sleep[%5]: EXIT(0)                                                 <
--- Line Differences ---
EXPECT:   1) @> cat test_data/quote.txt
EXPECT:   2) @> test_data/table.sh 20 2
EXPECT:   3) @> sleep 2
EXPECT:   4) @> cat test_data/gettysburg.txt
EXPECT:   5) @> grep printf test_data/print_args.c
EXPECT:   6) @> sleep 4
EXPECT:   7) @> pause 500000000 0
EXPECT:   8) @> list
EXPECT:   9) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:  10) 0    %0           0    EXIT(0)  125 cat test_data/quote.txt 
EXPECT:  11) 1    %3          -1        RUN   -1 test_data/table.sh 20 2 
EXPECT:  12) 2    %4          -1        RUN   -1 sleep 2 
EXPECT:  13) 3    %1           0    EXIT(0) 1511 cat test_data/gettysburg.txt 
EXPECT:  14) 4    %2           0    EXIT(0)   71 grep printf test_data/print_args.c 
EXPECT:  15) 5    %5          -1        RUN   -1 sleep 4 
EXPECT:  16) @> output-all
EXPECT:  17) @<<< Output for cat[%0] (125 bytes):
EXPECT:  18) ----------------------------------------
EXPECT:  19) Object-oriented programming is an exceptionally bad idea which could
EXPECT:  20) only have originated in California.
EXPECT:  21) 
EXPECT:  22) -- Edsger Dijkstra
EXPECT:  23) ----------------------------------------
EXPECT:  24) @<<< Output for test_data/table.sh[%3] (-1 bytes):
EXPECT:  25) ----------------------------------------
EXPECT:  26) test_data/table.sh[%3] : output not ready
EXPECT:  27) ----------------------------------------
EXPECT:  28) @<<< Output for sleep[%4] (-1 bytes):
EXPECT:  29) ----------------------------------------
EXPECT:  30) sleep[%4] : output not ready
EXPECT:  31) ----------------------------------------
EXPECT:  32) @<<< Output for cat[%1] (1511 bytes):
EXPECT:  33) ----------------------------------------
EXPECT:  34) Four score and seven years ago our fathers brought forth on this
EXPECT:  35) continent, a new nation, conceived in Liberty, and dedicated to the
EXPECT:  36) proposition that all men are created equal.
EXPECT:  37) 
EXPECT:  38) Now we are engaged in a great civil war, testing whether that nation,
EXPECT:  39) or any nation so conceived and so dedicated, can long endure. We are
EXPECT:  40) met on a great battle-field of that war. We have come to dedicate a
EXPECT:  41) portion of that field, as a final resting place for those who here
EXPECT:  42) gave their lives that that nation might live. It is altogether fitting
EXPECT:  43) and proper that we should do this.
EXPECT:  44) 
EXPECT:  45) But, in a larger sense, we can not dedicate -- we can not consecrate
EXPECT:  46) -- we can not hallow -- this ground. The brave men, living and dead,
EXPECT:  47) who struggled here, have consecrated it, far above our poor power to
EXPECT:  48) add or detract. The world will little note, nor long remember what we
EXPECT:  49) say here, but it can never forget what they did here. It is for us the
EXPECT:  50) living, rather, to be dedicated here to the unfinished work which they
EXPECT:  51) who fought here have thus far so nobly advanced. It is rather for us
EXPECT:  52) to be here dedicated to the great task remaining before us -- that
EXPECT:  53) from these honored dead we take increased devotion to that cause for
EXPECT:  54) which they gave the last full measure of devotion -- that we here
EXPECT:  55) highly resolve that these dead shall not have died in vain -- that
EXPECT:  56) this nation, under God, shall have a new birth of freedom -- and that
EXPECT:  57) government of the people, by the people, for the people, shall not
EXPECT:  58) perish from the earth.
EXPECT:  59) 
EXPECT:  60) Abraham Lincoln
EXPECT:  61) November 19, 1863
EXPECT:  62) ----------------------------------------
EXPECT:  63) @<<< Output for grep[%2] (71 bytes):
EXPECT:  64) ----------------------------------------
EXPECT:  65)   printf("%d args received\n",argc);
EXPECT:  66)     printf("%d: %s\n",i,argv[i]);
EXPECT:  67) ----------------------------------------
EXPECT:  68) @<<< Output for sleep[%5] (-1 bytes):
EXPECT:  69) ----------------------------------------
EXPECT:  70) sleep[%5] : output not ready
EXPECT:  71) ----------------------------------------
EXPECT:  72) @> wait-all
EXPECT:  73) @> list
EXPECT:  74) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:  75) 0    %0           0    EXIT(0)  125 cat test_data/quote.txt 
EXPECT:  76) 1    %3           0    EXIT(0)  760 test_data/table.sh 20 2 
EXPECT:  77) 2    %4           0    EXIT(0)    0 sleep 2 
EXPECT:  78) 3    %1           0    EXIT(0) 1511 cat test_data/gettysburg.txt 
EXPECT:  79) 4    %2           0    EXIT(0)   71 grep printf test_data/print_args.c 
EXPECT:  80) 5    %5           0    EXIT(0)    0 sleep 4 
EXPECT:  81) @> exit
EXPECT:  83) @!!! cat[%0]: EXIT(0)
EXPECT:  84) @!!! cat[%1]: EXIT(0)
EXPECT:  85) @!!! grep[%2]: EXIT(0)
EXPECT:  86) @!!! test_data/table.sh[%3]: EXIT(0)
EXPECT:  87) @!!! sleep[%4]: EXIT(0)
EXPECT:  88) @!!! sleep[%5]: EXIT(0)

--- Valgrind Log from: test-results/raw/commando-17-valgrd.tmp ---
==516302== Memcheck, a memory error detector
==516302== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==516302== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==516302== Command: ./commando --echo
==516302== Parent PID: 516301
==516302== 
==516302== Conditional jump or move depends on uninitialised value(s)
==516302==    at 0x109A7F: cmd_new (cmd.c:12)
==516302==    by 0x10954C: main (commando.c:13)
==516302==  Uninitialised value was created by a stack allocation
==516302==    at 0x1094D9: main (commando.c:6)
==516302== 
==516302== Conditional jump or move depends on uninitialised value(s)
==516302==    at 0x109AE4: cmd_new (cmd.c:21)
==516302==    by 0x10954C: main (commando.c:13)
==516302==  Uninitialised value was created by a stack allocation
==516302==    at 0x1094D9: main (commando.c:6)
==516302== 
==516302== Invalid read of size 4
==516302==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==516302==    by 0x10956C: main (commando.c:14)
==516302==  Address 0x2000 is not stack'd, malloc'd or (recently) free'd
==516302== 
==516302== 
==516302== Process terminating with default action of signal 11 (SIGSEGV)
==516302==  Access not within mapped region at address 0x2000
==516302==    at 0x10A09E: cmdcol_add (cmdcol.c:6)
==516302==    by 0x10956C: main (commando.c:14)
==516302==  If you believe this happened as a result of a stack
==516302==  overflow in your program's main thread (unlikely but
==516302==  possible), you can try to increase the size of the
==516302==  main thread stack using the --main-stacksize= flag.
==516302==  The main thread stack size used in this run was 8388608.
==516302== 
==516302== HEAP SUMMARY:
==516302==     in use at exit: 2,352 bytes in 1 blocks
==516302==   total heap usage: 1 allocs, 0 frees, 2,352 bytes allocated
==516302== 
==516302== 2,352 bytes in 1 blocks are still reachable in loss record 1 of 1
==516302==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==516302==    by 0x109A50: cmd_new (cmd.c:8)
==516302==    by 0x10954C: main (commando.c:13)
==516302== 
==516302== LEAK SUMMARY:
==516302==    definitely lost: 0 bytes in 0 blocks
==516302==    indirectly lost: 0 bytes in 0 blocks
==516302==      possibly lost: 0 bytes in 0 blocks
==516302==    still reachable: 2,352 bytes in 1 blocks
==516302==         suppressed: 0 bytes in 0 blocks
==516302== 
==516302== For lists of detected and suppressed errors, rerun with: -s
==516302== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 0 from 0)

