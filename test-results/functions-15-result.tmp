(TEST 15) cmdcol_add_1
COMMENTS:

program: ./test_cmd cmdcol_add_1
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/functions-15-expect.tmp
- Actual output in: test-results/raw/functions-15-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                ==== ACTUAL ====                                             
{                                                               {
    // Tests whether cmdcol_add() properly adds a cmd to            // Tests whether cmdcol_add() properly adds a cmd to
    // those tracked by a cmdcol and that cmdcol_freeall()          // those tracked by a cmdcol and that cmdcol_freeall()
    // correctly frees memory associated with the collection.       // correctly frees memory associated with the collection.
    char *children[][5] = {                                         char *children[][5] = {
      {"cat","test_data/quote.txt",NULL},                             {"cat","test_data/quote.txt",NULL},    
      {"test_data/sleep_print","1","wait for me",NULL},               {"test_data/sleep_print","1","wait for me",NULL},
      {NULL},                                                         {NULL},
    };                                                              };
    cmdcol_t cmdcol_actual = {};                                    cmdcol_t cmdcol_actual = {};
    cmdcol_t *cmdcol = &cmdcol_actual;                              cmdcol_t *cmdcol = &cmdcol_actual;
    for(int i=0; children[i][0] != NULL; i++){                      for(int i=0; children[i][0] != NULL; i++){
      cmd_t *cmd = cmd_new(children[i]);                              cmd_t *cmd = cmd_new(children[i]);
      cmdcol_add(cmdcol, cmd);                                        cmdcol_add(cmdcol, cmd);
    }                                                               }
    printf("cmdcol->size: %d\n",cmdcol->size);                      printf("cmdcol->size: %d\n",cmdcol->size);
    for(int i=0; children[i][0] != NULL; i++){                      for(int i=0; children[i][0] != NULL; i++){
      printf("cmdcol->cmd[%d]->name: %s\n",                           printf("cmdcol->cmd[%d]->name: %s\n",
             i, cmdcol->cmd[i]->name);                                       i, cmdcol->cmd[i]->name);
    }                                                               }
    cmdcol_freeall(cmdcol);                                         cmdcol_freeall(cmdcol);
}                                                               }
cmdcol->size: 2                                               <
cmdcol->cmd[0]->name: cat                                     <
cmdcol->cmd[1]->name: test_data/sleep_print                   <
ALERTS:                                                         ALERTS:
                                                              (
--- Line Differences ---
EXPECT:  23) cmdcol->size: 2
EXPECT:  24) cmdcol->cmd[0]->name: cat
EXPECT:  25) cmdcol->cmd[1]->name: test_data/sleep_print

--- Valgrind Log from: test-results/raw/functions-15-valgrd.tmp ---
==2845311== Memcheck, a memory error detector
==2845311== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2845311== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2845311== Command: ./test_cmd cmdcol_add_1
==2845311== Parent PID: 2845310
==2845311== 
==2845311== Invalid write of size 8
==2845311==    at 0x10B26B: cmd_new (cmd.c:7)
==2845311==    by 0x10A632: main (test_cmd.c:351)
==2845311==  Address 0x100 is not stack'd, malloc'd or (recently) free'd
==2845311== 
==2845311== 
==2845311== Process terminating with default action of signal 11 (SIGSEGV)
==2845311==  Access not within mapped region at address 0x100
==2845311==    at 0x10B26B: cmd_new (cmd.c:7)
==2845311==    by 0x10A632: main (test_cmd.c:351)
==2845311==  If you believe this happened as a result of a stack
==2845311==  overflow in your program's main thread (unlikely but
==2845311==  possible), you can try to increase the size of the
==2845311==  main thread stack using the --main-stacksize= flag.
==2845311==  The main thread stack size used in this run was 8388608.
==2845311== 
==2845311== HEAP SUMMARY:
==2845311==     in use at exit: 9 bytes in 1 blocks
==2845311==   total heap usage: 1 allocs, 0 frees, 9 bytes allocated
==2845311== 
==2845311== 9 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2845311==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==2845311==    by 0x10B263: cmd_new (cmd.c:7)
==2845311==    by 0x10A632: main (test_cmd.c:351)
==2845311== 
==2845311== LEAK SUMMARY:
==2845311==    definitely lost: 9 bytes in 1 blocks
==2845311==    indirectly lost: 0 bytes in 0 blocks
==2845311==      possibly lost: 0 bytes in 0 blocks
==2845311==    still reachable: 0 bytes in 0 blocks
==2845311==         suppressed: 0 bytes in 0 blocks
==2845311== 
==2845311== For lists of detected and suppressed errors, rerun with: -s
==2845311== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

