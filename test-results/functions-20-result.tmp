(TEST 20) cmdcol_print_2
COMMENTS:

program: ./test_cmd cmdcol_print_2
Failure messages:
- FAILURE(139) due to Kill Signal from OS: likely a SEGFAULT occured
- FAILURE: Output Mismatch at lines marked

--- Side by Side Differences ---
- Expect output in: test-results/raw/functions-20-expect.tmp
- Actual output in: test-results/raw/functions-20-actual.tmp
- Differing lines have a character like '|' '>' or '<' in the middle
==== EXPECT ====                                                                          ==== ACTUAL ====                                                                       
{                                                                                         {
    // Adds to a cmd collection, runs commands, and                                           // Adds to a cmd collection, runs commands, and
    // the prints showing most commands in the RUN                                            // the prints showing most commands in the RUN
    // state. Then waits for them to complete via                                             // state. Then waits for them to complete via
    // cmdcol_update_state(). Calls cmdcol_print() to                                         // cmdcol_update_state(). Calls cmdcol_print() to
    // show most commands in EXIT(..) state.                                                  // show most commands in EXIT(..) state.
    char *children[][5] = {                                                                   char *children[][5] = {
      {"cat","test_data/quote.txt",NULL},                                                       {"cat","test_data/quote.txt",NULL},    
      {"ls","-a","test_data/stuff",NULL},                                                       {"ls","-a","test_data/stuff",NULL},
      {"grep","-i", "flurbo ","test_data/gettysburg.txt",NULL},                                 {"grep","-i", "flurbo ","test_data/gettysburg.txt",NULL},
      {"ls","-a","-F","test_data/stuff",NULL},                                                  {"ls","-a","-F","test_data/stuff",NULL},
      {"gcc","-o","test_data/print_args",                                                       {"gcc","-o","test_data/print_args",
                   "test_data/print_args.c",NULL},                                                           "test_data/print_args.c",NULL},
      {NULL},                                                                                   {NULL},
    };                                                                                        };
    cmdcol_t cmdcol_actual = {};                                                              cmdcol_t cmdcol_actual = {};
    cmdcol_t *cmdcol = &cmdcol_actual;                                                        cmdcol_t *cmdcol = &cmdcol_actual;
    for(int i=0; children[i][0] != NULL; i++){                                                for(int i=0; children[i][0] != NULL; i++){
      cmd_t *cmd = cmd_new(children[i]);                                                        cmd_t *cmd = cmd_new(children[i]);
      cmdcol_add(cmdcol, cmd);                                                                  cmdcol_add(cmdcol, cmd);
      cmd_start(cmd);                                                                           cmd_start(cmd);
    }                                                                                         }
    printf("Before cmdcol_update_state()\n");                                                 printf("Before cmdcol_update_state()\n");
    cmdcol_print(cmdcol);       // RUN                                                        cmdcol_print(cmdcol);       // RUN

    cmdcol_update_state(cmdcol, DOBLOCK);                                                     cmdcol_update_state(cmdcol, DOBLOCK);

    printf("\n");                                                                             printf("\n");
    printf("After cmdcol_update_state()\n");                                                  printf("After cmdcol_update_state()\n");
    cmdcol_print(cmdcol);       // EXIT(..)                                                   cmdcol_print(cmdcol);       // EXIT(..)
    cmdcol_freeall(cmdcol);                                                                   cmdcol_freeall(cmdcol);
}                                                                                         }
Before cmdcol_update_state()                                                            <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                                             <
0    %0          -1        RUN   -1 cat test_data/quote.txt                             <
1    %1          -1        RUN   -1 ls -a test_data/stuff                               <
2    %2          -1        RUN   -1 grep -i flurbo  test_data/gettysburg.txt            <
3    %3          -1        RUN   -1 ls -a -F test_data/stuff                            <
4    %4          -1        RUN   -1 gcc -o test_data/print_args test_data/print_args.c  <
                                                                                        <
After cmdcol_update_state()                                                             <
JOB  #PID      STAT   STR_STAT OUTB COMMAND                                             <
0    %0           0    EXIT(0)  125 cat test_data/quote.txt                             <
1    %1           0    EXIT(0)   52 ls -a test_data/stuff                               <
2    %2           1    EXIT(1)    0 grep -i flurbo  test_data/gettysburg.txt            <
3    %3           0    EXIT(0)   55 ls -a -F test_data/stuff                            <
4    %4           0    EXIT(0)    0 gcc -o test_data/print_args test_data/print_args.c  <
ALERTS:                                                                                   ALERTS:
@!!! cat[%0]: EXIT(0)                                                                   <
@!!! ls[%1]: EXIT(0)                                                                    <
@!!! grep[%2]: EXIT(1)                                                                  <
@!!! ls[%3]: EXIT(0)                                                                    <
@!!! gcc[%4]: EXIT(0)                                                                   <
                                                                                        <
--- Line Differences ---
EXPECT:  33) Before cmdcol_update_state()
EXPECT:  34) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:  35) 0    %0          -1        RUN   -1 cat test_data/quote.txt 
EXPECT:  36) 1    %1          -1        RUN   -1 ls -a test_data/stuff 
EXPECT:  37) 2    %2          -1        RUN   -1 grep -i flurbo  test_data/gettysburg.txt 
EXPECT:  38) 3    %3          -1        RUN   -1 ls -a -F test_data/stuff 
EXPECT:  39) 4    %4          -1        RUN   -1 gcc -o test_data/print_args test_data/print_args.c 
EXPECT:  40) 
EXPECT:  41) After cmdcol_update_state()
EXPECT:  42) JOB  #PID      STAT   STR_STAT OUTB COMMAND
EXPECT:  43) 0    %0           0    EXIT(0)  125 cat test_data/quote.txt 
EXPECT:  44) 1    %1           0    EXIT(0)   52 ls -a test_data/stuff 
EXPECT:  45) 2    %2           1    EXIT(1)    0 grep -i flurbo  test_data/gettysburg.txt 
EXPECT:  46) 3    %3           0    EXIT(0)   55 ls -a -F test_data/stuff 
EXPECT:  47) 4    %4           0    EXIT(0)    0 gcc -o test_data/print_args test_data/print_args.c 
EXPECT:  49) @!!! cat[%0]: EXIT(0)
EXPECT:  50) @!!! ls[%1]: EXIT(0)
EXPECT:  51) @!!! grep[%2]: EXIT(1)
EXPECT:  52) @!!! ls[%3]: EXIT(0)
EXPECT:  53) @!!! gcc[%4]: EXIT(0)
EXPECT:  54) 

--- Valgrind Log from: test-results/raw/functions-20-valgrd.tmp ---
==2845508== Memcheck, a memory error detector
==2845508== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2845508== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==2845508== Command: ./test_cmd cmdcol_print_2
==2845508== Parent PID: 2845507
==2845508== 
==2845508== Invalid write of size 8
==2845508==    at 0x10B26B: cmd_new (cmd.c:7)
==2845508==    by 0x10B13D: main (test_cmd.c:480)
==2845508==  Address 0x100 is not stack'd, malloc'd or (recently) free'd
==2845508== 
==2845508== 
==2845508== Process terminating with default action of signal 11 (SIGSEGV)
==2845508==  Access not within mapped region at address 0x100
==2845508==    at 0x10B26B: cmd_new (cmd.c:7)
==2845508==    by 0x10B13D: main (test_cmd.c:480)
==2845508==  If you believe this happened as a result of a stack
==2845508==  overflow in your program's main thread (unlikely but
==2845508==  possible), you can try to increase the size of the
==2845508==  main thread stack using the --main-stacksize= flag.
==2845508==  The main thread stack size used in this run was 8388608.
==2845508== 
==2845508== HEAP SUMMARY:
==2845508==     in use at exit: 9 bytes in 1 blocks
==2845508==   total heap usage: 1 allocs, 0 frees, 9 bytes allocated
==2845508== 
==2845508== 9 bytes in 1 blocks are definitely lost in loss record 1 of 1
==2845508==    at 0x483B7F3: malloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==2845508==    by 0x10B263: cmd_new (cmd.c:7)
==2845508==    by 0x10B13D: main (test_cmd.c:480)
==2845508== 
==2845508== LEAK SUMMARY:
==2845508==    definitely lost: 9 bytes in 1 blocks
==2845508==    indirectly lost: 0 bytes in 0 blocks
==2845508==      possibly lost: 0 bytes in 0 blocks
==2845508==    still reachable: 0 bytes in 0 blocks
==2845508==         suppressed: 0 bytes in 0 blocks
==2845508== 
==2845508== For lists of detected and suppressed errors, rerun with: -s
==2845508== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

